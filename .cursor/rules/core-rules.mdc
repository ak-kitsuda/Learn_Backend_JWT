---
description: 
globs: 
alwaysApply: true
---
# コアルール – JWT Todo 学習プロジェクト

このルールは **常時適用 (Always Apply)** されます。

## プロジェクト概要

- **目的**: JWT (JSON Web Token) の利点・欠点を実装と比較検証を通して理解し、適切に選択・運用できる力を身に付ける
- **対象レベル**: 初学者〜中級者（段階的学習アプローチを重視）
- **比較対象**: 前回のセッション版 Todo アプリ ([旧README.md](mdc:../旧README.md))
- **完了条件**: **Phase1 (バックエンド基盤構築) 完了** で第一段階クリアとする。Phase2 以降は今後の学習ステップとして追加予定。

## 📚 学習目標（5つの柱）

1. **JWT の仕組み理解** – Header, Payload, Signature の構造と役割
2. **アーキテクチャ比較** – セッション/クッキー方式との違い（ステートレス vs ステートフル）
3. **トークン戦略習得** – リフレッシュトークン・トークン失効の実装方法
4. **セキュリティ対策** – XSS, CSRF, Token 盗難などJWT特有のリスク理解
5. **フルスタック実践** – API 設計・フロント連携の実践的スキル習得

## 技術スタック (変更禁止)

| レイヤ | 技術 | バージョン | 役割 |
|:-------|:-----|:-----------|:-----|
| Backend | Node.js | 16+ | サーバーランタイム |
| | Express.js | 4系 | Web フレームワーク |
| | SQLite3 | 最新 | データベース |
| | jsonwebtoken | 9系 | JWT 発行・検証 |
| | bcrypt | 最新 | パスワードハッシュ化 |
| Frontend | Vue.js | 3 (Composition API) | SPA フレームワーク |
| 開発支援 | nodemon, ESLint | 最新 | 開発効率化 |

> **注意**: バージョン変更が必要な場合は必ず提案し、承認を得るまで実行しないこと。

## 🎯 学習アプローチ（段階的学習の重視）

### 理論と実践のバランス
- **理論**: 各概念の「なぜ？」を理解する
- **実践**: 実際にコードを書いて動作を確認する
- **比較**: セッション方式との違いを常に意識する

### 段階的理解プロセス
1. **動かす** → まずは動作させて全体像を把握
2. **理解する** → なぜそうなるのかを深く学ぶ
3. **応用する** → 学んだ知識を他の場面で活用

### 初心者向け配慮事項
- 複雑な概念は小さなステップに分割
- 各ステップで学習ポイントを明確化
- エラーハンドリングとデバッグ方法の重視
- 学習記録と振り返りの推奨

## 📋 学習フェーズ構成

| Phase | 目標 | 主要学習内容 | 状態 |
|:------|:-----|:-------------|:-----|
| 1 | 基礎固め | Express + SQLite 基盤構築 | 🎯 **現在** |
| 2 | JWT理論 | JWT構造・仕組み理解 | 📋 次回予定 |
| 3 | 認証API | ユーザー登録・ログイン実装 | 📋 次回予定 |
| 4 | Todo実装 | CRUD + フロントエンド連携 | 📋 次回予定 |
| 5 | 比較検証 | セキュリティ・パフォーマンス比較 | 📋 次回予定 |

### Phase1 重要ポイント
- Express のミドルウェア・ルーティング理解
- SQLite 接続・非同期処理・エラーハンドリング
- 開発環境構築（nodemon, ESLint）
- 基本API（`/api/hello`, `/api/db-test`）の動作確認

## 🔒 セキュリティ重点項目

### JWT 特有のセキュリティリスク
1. **トークン盗難対策** – 保存場所の検討（localStorage vs Cookie）
2. **XSS 対策** – フロントエンドでのトークン管理
3. **CSRF 対策** – Bearer ヘッダ vs Cookie の選択
4. **トークン失効** – ブラックリスト管理・リフレッシュ戦略
5. **ペイロード肥大** – 機密情報の適切な管理

### コミット前セキュリティチェック (必須)
```bash
# 危険文字列スキャン（JWT関連も含む）
rg -n "password|api_key|secret|token|jwt_secret|refresh_token" --glob "*.{js,ts,vue,md}"

# 個人情報誤コミットチェック
rg -n "@gmail|@yahoo|@outlook" --glob "*.{js,ts,vue,md}"

# 環境変数ファイルの確認
git status | grep -E "\.env|\.env\."
```

## 🔄 セッション vs JWT 比較観点

学習を通して以下の違いを実際に検証する：

| 項目 | セッション/クッキー | JWT |
|:-----|:-------------------|:----|
| 状態管理 | サーバー側ストア | ステートレス（トークン内包） |
| スケーラビリティ | Redis等の共有ストア必要 | 水平スケール容易 |
| 無効化 | セッション破棄で即時失効 | ブラックリスト or 期限切れ待ち |
| CSRF耐性 | Cookie依存（要対策） | Bearer ヘッダなら原則安全 |
| データ保存 | サーバー側ストア | ペイロード埋込（サイズ注意） |

## 制約事項

1. **UI/UX の大幅改変は禁止** – レイアウト・配色・フォント変更が必要な場合は事前に相談
2. **明示的に指示されていないファイル／API の追加・変更は要提案**
3. **ライブラリ追加・削除は要承認**
4. **GitHub に機密情報を push しない** (JWT秘密鍵・個人情報など)
5. **すべてのタスクは日本語で報告** – コミットメッセージも日本語で簡潔に
6. **段階的学習の順序を守る** – Phase1完了前にPhase2の実装をしない

## ルールファイル一覧

| 種類 | ファイル | 説明 |
| :--- | :--- | :--- |
| コアルール (本ファイル) | **core-rules.mdc** | 全体方針・制約・セキュリティ |
| フェーズ管理 | [phase-step-management.mdc](mdc:phase-step-management.mdc) | 作業ステップと進捗管理方法 |
| Phase1 ガイド | [phase1-guide.mdc](mdc:phase1-guide.mdc) | バックエンド基盤構築 (初心者向け) |
| 参考コマンド | [reference-commands.mdc](mdc:reference-commands.mdc) | よく使う CLI コマンド集 |
| デモコード管理 | [demo-code-guidelines.mdc](mdc:demo-code-guidelines.mdc) | デモ / サンプルコード運用 |
| Git セキュリティ | [git-security-check.mdc](mdc:git-security-check.mdc) | 詳細な Git セキュリティ手順 |

---

## 進捗管理・レビューフロー

### 進捗更新ルール
- 各フェーズ完了時に [README.md](mdc:README.md) のチェックリストを更新し、コミット
- 未着手 → 進行中 → ✅ 完了 の順で記載
- 学習記録の積極的な活用を推奨

### レビュー & 承認フロー
1. **提案**: 大きな変更は Pull Request で提案し、概要・理由・影響を説明
2. **レビュー**: Reviewer (講師・ペア) が確認し、必要なら修正依頼
3. **マージ**: Approved 後マージ。マージ後はフェーズの進捗を更新

### 学習記録の推奨
- 各段階で学んだことをメモに残す
- つまずいた点と解決方法を記録
- 理解度を自己評価し、必要に応じて復習

---

## 緊急エスカレーション

重大なセキュリティ脆弱性 (JWT トークン漏洩、SQL インジェクション、XSS脆弱性 等) を発見した場合は、**即時報告** し、修正 PR を最優先で作成。

---

<!-- ここより下はメタ情報。編集禁止 -->
