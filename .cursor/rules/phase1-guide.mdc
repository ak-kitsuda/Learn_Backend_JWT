---
description: 
globs: 
alwaysApply: false
---
# Phase1: バックエンド基盤構築ガイド

## 🎯 Phase1 の目標

- Express.js サーバーをセットアップし、基本ルーティング & ミドルウェアを実装する
- SQLite データベース接続を確立する
- 開発効率化 (nodemon & ESLint) 環境を整備する

完了後には `/api/hello` および `/api/db-test` が動作し、DB への接続確認が出来ている状態となります。

---

## 📋 成果物

1. `backend/server.js` – ベースサーバー (PORT 3000)
2. `config/database.js` – SQLite 接続モジュール
3. `package.json` – 必要依存 (express, sqlite3, cors, nodemon)
4. サンプル API
   - GET `/api/hello` → `{ message: 'Hello World' }`
   - GET `/api/db-test` → 現在時刻を DB から取得

---

## 🚀 実装ステップ

### ステップ 1: プロジェクト初期化

```bash
# プロジェクトディレクトリを作成し移動
mkdir -p backend && cd backend

# package.json を生成（-y で全てデフォルト設定）
npm init -y

# 本番用パッケージをインストール
npm install express sqlite3 cors

# 開発用パッケージをインストール
npm install -D nodemon eslint
```

#### 💡 なぜこれらのパッケージが必要なのか？

- **express**: Node.js で Web サーバーを簡単に作るためのフレームワーク
- **sqlite3**: SQLite データベースを操作するためのライブラリ
- **cors**: 異なるポート間での通信を許可（フロントエンドとの連携用）
- **nodemon**: ファイル変更時にサーバーを自動再起動（開発効率向上）
- **eslint**: コードの品質をチェックするツール

### ステップ 2: サーバー起動ファイルを作成

```javascript
// backend/server.js
const express = require('express');
const cors = require('cors');
const db = require('./config/database');

const app = express();

// ミドルウェアの設定
app.use(cors());                      // CORS対応
app.use(express.json());              // JSONボディを解析

// Hello World エンドポイント
app.get('/api/hello', (_req, res) => {
  res.json({ message: 'Hello World' });
});

// データベース接続テストエンドポイント
app.get('/api/db-test', (_req, res) => {
  db.get('SELECT datetime("now") as now', (err, row) => {
    if (err) {
      console.error('Database error:', err);
      return res.status(500).json({ error: 'DB Error' });
    }
    res.json({ now: row.now });
  });
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`🚀 Server running on http://localhost:${PORT}`);
});
```

#### 💡 コードの解説

- `require()`: 他のファイルやパッケージを読み込む
- `app.use()`: ミドルウェア（共通処理）を設定
- `app.get()`: GET リクエストを処理するルートを定義
- `res.json()`: JSON 形式でレスポンスを返す
- エラーハンドリング: データベースエラーが発生した場合の処理

### ステップ 3: SQLite 接続モジュール

```bash
# データベース用ディレクトリを作成
mkdir -p database
```

```javascript
// backend/config/database.js
const sqlite3 = require('sqlite3').verbose();
const path = require('path');

// データベースファイルのパスを設定
const dbPath = path.join(__dirname, '../database/todo.db');

// データベースに接続
const db = new sqlite3.Database(dbPath, (err) => {
  if (err) {
    console.error('❌ DB connection error:', err.message);
  } else {
    console.log('✅ SQLite connected successfully');
  }
});

module.exports = db;
```

#### 💡 SQLite について

- **ファイルベース**: 1つのファイルがデータベース全体
- **軽量**: サーバー不要で学習に最適
- **SQL**: 標準的な SQL 文法が使える

### ステップ 4: スクリプト & nodemon 設定

`package.json` に以下を追記:

```json
{
  "scripts": {
    "dev": "nodemon server.js",
    "start": "node server.js"
  }
}
```

#### 💡 npm scripts について

- `npm run dev`: 開発時に使用（ファイル変更で自動再起動）
- `npm start`: 本番時に使用（通常の起動）

---

## ✅ 完了チェックリスト

### 環境確認
- [ ] Node.js がインストールされている（`node --version`）
- [ ] npm がインストールされている（`npm --version`）

### ファイル構成確認
- [ ] `backend/server.js` が存在する
- [ ] `backend/config/database.js` が存在する
- [ ] `backend/database/` ディレクトリが存在する
- [ ] `backend/package.json` に必要なスクリプトが設定されている

### 動作確認
- [ ] `npm run dev` でサーバーが起動する
- [ ] ターミナルに「🚀 Server running on http://localhost:3000」が表示される
- [ ] ターミナルに「✅ SQLite connected successfully」が表示される

### API テスト
```bash
# Hello World API をテスト
curl http://localhost:3000/api/hello

# 期待される結果: {"message":"Hello World"}

# データベース接続テスト
curl http://localhost:3000/api/db-test

# 期待される結果: {"now":"2024-01-01 12:00:00"}（現在時刻）
```

### コード品質確認
- [ ] ESLint がエラー無く通る（`npx eslint server.js`）

---

## 🎓 学習ポイント

### Express.js の基本構造
```javascript
const app = express();  // ← アプリケーション作成
app.use(ミドルウェア);   // ← 共通処理設定
app.get(ルート, 処理);   // ← エンドポイント定義
app.listen(ポート);     // ← サーバー起動
```

### エラーハンドリングの重要性
```javascript
// ❌ エラーを無視（危険）
db.get(sql, (err, row) => {
  res.json(row); // errをチェックしない
});

// ✅ 適切なエラーハンドリング
db.get(sql, (err, row) => {
  if (err) {
    console.error(err);
    return res.status(500).json({ error: 'Server Error' });
  }
  res.json(row);
});
```

### ファイル構成の考え方
```
backend/
├── server.js          ← メイン起動ファイル
├── config/
│   └── database.js    ← データベース設定
├── database/
│   └── todo.db        ← SQLiteファイル（自動生成）
└── package.json       ← 依存関係管理
```

---

## 🔧 よくある問題と解決方法

### 問題1: `Cannot find module 'express'`
**原因**: パッケージがインストールされていない
**解決**: `npm install express sqlite3 cors`

### 問題2: `EADDRINUSE: address already in use`
**原因**: ポート3000が既に使用されている
**解決**: 
- 他のプロセスを停止: `pkill -f "node.*server.js"`
- または別のポートを使用: `PORT=3001 npm run dev`

### 問題3: データベースファイルが作成されない
**原因**: `database/` ディレクトリが存在しない
**解決**: `mkdir -p backend/database`

---

## 🎉 Phase1 完了後の次のステップ

Phase1 が完了したら：

1. **学習記録**: 何を学んだかをメモに残す
2. **理解度チェック**: Express とデータベースの基本概念を復習
3. **Phase2 準備**: JWT の基礎知識を予習（次回公開予定）

完了したら `README.md` の進捗チェックリストを ✅ に更新してください！

---

<!-- 編集禁止: メタ情報 -->
