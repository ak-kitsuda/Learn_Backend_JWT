---
description: 
globs: 
alwaysApply: false
---
# Phase2: JWT理論学習ガイド

## 🎯 Phase2 の目標

**メイン目標**: JWT (JSON Web Token) の構造と仕組みを理論的に理解し、Phase3の認証API実装への準備を完了する

### Phase1からの発展性
- **Phase1**: Express + SQLite の基盤構築 ✅ 完了
- **Phase2**: JWT の仕組み理解 ← 🎯 **現在の学習範囲**
- **Phase3**: 認証API実装への橋渡し

### 学習アプローチ
**「理論 → 実践 → 検証」の3段階学習**を採用し、JWT の概念を段階的に理解していきます。

---

## 📋 成果物

1. `backend/demo/` – 学習用デモコード群
2. `docs/jwt-concepts.md` – JWT概念まとめシート
3. `docs/session-jwt-comparison.md` – セッション vs JWT 比較資料
4. `.env.example` – 環境変数設定例
5. セキュリティチェックリスト

---

## 🚀 Phase2 ステップ構成（5段階学習）

| ステップ | 目標 | 学習内容 | 実装作業 | 所要時間 |
|:---------|:-----|:---------|:---------|:---------|
| **2-1** | JWT基礎概念理解 | JWT とは何か、なぜ必要か | 概念整理、比較表作成 | 30分 |
| **2-2** | JWT構造解析 | Header, Payload, Signature | JWT デコード実習 | 45分 |
| **2-3** | セッション比較理解 | ステートレス vs ステートフル | 比較デモ作成 | 30分 |
| **2-4** | JWT実装基礎 | jsonwebtoken ライブラリ使用法 | 簡単なトークン生成・検証 | 45分 |
| **2-5** | セキュリティ基礎 | JWT のリスクと対策 | セキュリティチェック実装 | 30分 |

**合計学習時間**: 約3時間（休憩含む）

**🚨 重要**: 各ステップは必ず1つずつ完了させ、次のステップに進む前にユーザーに確認を取ること

---

## 📚 各ステップの詳細

### ステップ 2-1: JWT基礎概念理解

**目標**: JWT の存在意義と基本概念を理解する

#### 💡 学習ポイント

1. **JWT とは何か？**
   - JSON Web Token の定義と RFC 7519 標準仕様
   - 使用される場面（認証・認可・情報交換）
   - Base64URL エンコーディングの特徴

2. **なぜ JWT が必要なのか？**
   - 従来の課題（サーバー状態管理の複雑さ）
   - マイクロサービス時代の要求
   - 分散システムでのスケーラビリティ向上

3. **JWT の利点と欠点**
   - ✅ 利点：ステートレス、スケーラブル、標準化、自己完結型
   - ❌ 欠点：トークンサイズ、無効化の難しさ、セキュリティリスク

#### 実装作業
```bash
# ディレクトリ作成
mkdir -p backend/demo docs

# 概念理解デモファイル作成
touch backend/demo/jwt-concept-demo.js
touch docs/jwt-concepts.md
```

#### 学習成果物
- JWT概念まとめシート（docs/jwt-concepts.md）
- セッション vs JWT 基本比較表

---

### ステップ 2-2: JWT構造解析

**目標**: JWT の3部構造（Header.Payload.Signature）を完全に理解する

#### 💡 学習ポイント

1. **JWT の基本構造**
   ```
   Header.Payload.Signature
   xxxxxx.yyyyyy.zzzzzz
   ```

2. **各部分の役割**
   - **Header**: アルゴリズム情報（typ: "JWT", alg: "HS256"）
   - **Payload**: クレーム（iss, exp, sub, iat, 任意データ）
   - **Signature**: HMAC SHA256 による改ざん検証用署名

3. **Base64URL エンコーディング**
   - 通常のBase64との違い（+/ → -_, padding削除）
   - URL safe な文字列化の重要性

#### 実装作業
```javascript
// backend/demo/jwt-structure-demo.js
// 実際のJWTをデコードして構造を詳細解析
// 各セクションの内容確認とエンコーディング理解
```

#### 学習成果物
- JWT構造解析図（visual diagram）
- デコード実習結果とコード
- 各クレームの説明資料

---

### ステップ 2-3: セッション比較理解

**目標**: ステートレス vs ステートフルの違いを体感的に理解する

#### 💡 学習ポイント

1. **セッション方式の動作**
   - サーバー側セッションストア（メモリ/Redis）
   - セッションIDでの状態管理
   - Cookie による自動送信

2. **JWT方式の動作**
   - トークン内包状態（Self-contained）
   - ステートレス検証
   - Authorization ヘッダでの明示的送信

3. **実際の差異**
   - パフォーマンス特性の違い
   - サーバーリソース使用量
   - スケールアウト容易性

#### 実装作業
```javascript
// backend/demo/session-jwt-comparison.js
// セッション方式とJWT方式の動作シミュレーション
// パフォーマンス比較テスト実装
```

#### 学習成果物
- アーキテクチャ図（セッション vs JWT）
- パフォーマンス比較結果
- 比較まとめ資料（docs/session-jwt-comparison.md）

---

### ステップ 2-4: JWT実装基礎

**目標**: jsonwebtoken ライブラリの基本的な使用方法を完全習得する

#### 💡 学習ポイント

1. **jsonwebtoken ライブラリ**
   - インストールとインポート
   - 基本API（sign, verify, decode）
   - オプション設定の理解

2. **トークン生成**
   - ペイロード設計のベストプラクティス
   - 署名アルゴリズム選択（HS256, RS256）
   - 適切な有効期限設定

3. **トークン検証**
   - 署名検証プロセス
   - 有効期限チェック
   - 包括的なエラーハンドリング

#### 実装作業
```bash
# 必要なパッケージのインストール
cd backend
npm install jsonwebtoken

# 基本実装デモ作成
touch backend/demo/jwt-basic-demo.js
```

#### 学習成果物
- JWT生成・検証関数の実装
- エラーパターン整理シート
- 実用的なヘルパー関数群

---

### ステップ 2-5: セキュリティ基礎

**目標**: JWT の主要なセキュリティリスクと基本対策を理解する

#### 💡 学習ポイント

1. **JWT のセキュリティリスク**
   - None アルゴリズム攻撃
   - 弱い秘密鍵に対する推測攻撃
   - トークン盗難リスク（XSS, Man-in-the-middle）
   - ペイロード情報漏えい（Base64デコード可能）

2. **基本的な対策**
   - 暗号学的に安全な秘密鍵生成（256bit以上）
   - 適切な有効期限設定（15分〜1時間）
   - HTTPS通信の必須化
   - センシティブ情報のペイロード除外

3. **開発時の注意点**
   - 秘密鍵のハードコード絶対禁止
   - 環境変数による適切な管理
   - デバッグ情報の本番漏えい防止
   - トークンのログ出力回避

#### 実装作業
```bash
# 環境変数設定例作成
touch .env.example

# セキュリティチェックデモ作成
touch backend/demo/jwt-security-demo.js
```

#### 学習成果物
- セキュリティチェックリスト
- 環境変数設定ガイド（.env.example）
- セキュリティベストプラクティス文書

---

## ✅ Phase2 完了チェックリスト

### 理論理解チェック
- [ ] JWT の3部構造を詳細に説明できる
- [ ] セッション vs JWT の違いをアーキテクチャ観点で説明できる
- [ ] JWT の主要なセキュリティリスクとその対策を理解している
- [ ] ステートレス認証の利点・欠点を説明できる
- [ ] Base64URL エンコーディングの特徴を理解している

### 実装確認チェック
- [ ] JWT をデコードして内容を詳細確認できる
- [ ] jsonwebtoken を使用してトークンの生成・検証ができる
- [ ] 適切な環境変数設定ができる
- [ ] セキュリティチェック機能が実装・実行できる
- [ ] エラーハンドリングが適切に実装されている

### 学習成果物チェック
- [ ] JWT概念まとめシート（docs/jwt-concepts.md）
- [ ] セッション vs JWT 比較資料（docs/session-jwt-comparison.md）
- [ ] 構造解析図・比較表
- [ ] 基本実装コード（demo/以下）
- [ ] セキュリティガイドライン・チェックリスト
- [ ] 環境変数設定例（.env.example）

---

## 🎓 学習のコツ

### 理論と実践のバランス
- **理論**: 各概念の「なぜ？」を理解してから実装に移る
- **実践**: 実際にコードを書いて動作を確認する
- **比較**: セッション方式との違いを常に意識する

### 段階的な理解プロセス
1. **動かす** → まずは動作させて全体像を把握
2. **理解する** → なぜそうなるのかを深く学ぶ
3. **応用する** → 学んだ知識をPhase3で実際に活用

### 初心者向け配慮事項
- 複雑な概念は小さなステップに分割
- 各ステップで学習ポイントを明確化
- エラーが発生した場合の適切な対処法を学ぶ
- 理解度の自己評価と振り返りを重視

---

## 🔄 Phase3 への準備

Phase2完了後は、学習した JWT の理論知識を活用して **Phase3「認証API実装」** に進みます：

### Phase3 で活用される知識
- **JWT生成・検証**: ログイン時のトークン発行
- **セキュリティ対策**: 本番レベルの実装
- **エラーハンドリング**: 認証フローでの例外処理
- **環境変数管理**: 秘密鍵の適切な管理

### Phase3 予告内容
- **ユーザー登録・ログイン API**: JWT を使った認証フロー実装
- **JWT 検証ミドルウェア**: Express での認証チェック
- **リフレッシュトークン実装**: トークンローテーション機能
- **実際の認証フロー構築**: フロントエンドとの連携準備

---

## 🔧 よくある問題と解決方法

### 問題1: `TypeError: jwt.sign is not a function`
**原因**: ES6 import文の記述ミス
**解決**: 
```javascript
// ❌ 間違い
import jwt from 'jsonwebtoken';

// ✅ 正しい（CommonJS環境の場合）
const jwt = require('jsonwebtoken');
```

### 問題2: `JsonWebTokenError: invalid signature`
**原因**: 署名検証時に異なる秘密鍵を使用
**解決**: 生成時と検証時で同じ秘密鍵を使用することを確認

### 問題3: `TokenExpiredError: jwt expired`
**原因**: トークンの有効期限が切れている
**解決**: トークンの有効期限設定を確認し、適切な期間を設定

### 問題4: 環境変数が読み込まれない
**原因**: .envファイルの場所または記述形式が間違っている
**解決**: 
```bash
# .envファイルをプロジェクトルートに配置
JWT_SECRET=your-256-bit-secret

# Node.jsでdotenvを使用
require('dotenv').config();
```

---

## 📝 実施時の重要注意事項

### 1. デモコードの管理
- 学習用デモコードは `backend/demo/` ディレクトリに配置
- Phase2完了後にクリーンアップを実施
- 本番コードに影響しない独立性を保つ

### 2. セキュリティの取り扱い
- 秘密鍵は絶対にGitにコミットしない
- `.env.example` は安全なサンプル値のみ記載
- 学習用であってもセキュリティベストプラクティスに従う

### 3. 学習記録の推奨
- 各ステップでの気づき・疑問点を記録
- 理解度の自己評価を実施
- つまずいた点と解決方法を文書化

### 4. ステップ進行の厳守
- **1ステップ1確認**: 各ステップ完了後は必ずユーザー確認
- **急がず理解**: 理解度確認を最優先
- **質問推奨**: 不明点は遠慮なく質問

---

## 緊急時の対応

### JWT関連のセキュリティ問題を発見した場合
1. **即座に作業停止**
2. **問題の詳細を記録**
3. **修正方法を提案**
4. **承認後に修正実施**

### 学習が予定通り進まない場合
1. **現在の理解度を正直に報告**
2. **困っている具体的な点を明確化**
3. **追加の説明やデモを要求**
4. **学習ペースの調整を相談**

---

<!-- 編集禁止: メタ情報 -->
