---
description: 
globs: 
alwaysApply: true
---
# Phase Step Management – 作業進行ルール

このルールは、各フェーズの進め方・チケット分割・タスク完了条件を定義します。

---

## フェーズ構成

| フェーズ | 概要 | 完了条件 |
| :-- | :-- | :-- |
| Phase1 | バックエンド基盤構築 | server.js で `/api/hello`, `/api/db-test` が動作し、SQLite 接続確認が取れている |

---

## ステップ共通フロー

1. **Planning** – タスク洗い出し、Issue / Branch 作成
2. **Implementation** – コード実装 & コミット (小さく・意味のある単位)
3. **Self-Check** – 単体テスト / 動作確認 / linter 通過
4. **Pull Request** – 説明テンプレートに沿って作成
5. **Review** – コードレビュー & 修正
6. **Merge** – main / dev ブランチへマージ
7. **Progress Update** – README & ルールのチェックリスト更新

> 1つの PR は **1 機能 or 1 バグ修正** に限定し、複数フェーズの変更を混在させない。

---

## ブランチ戦略

- `main`: 安定版 (デプロイ対象)
- `dev`: 開発統合用 (常に動く状態を保持)
- `feature/<phase>-<short-title>`: 各フェーズ機能実装用

```text
例: feature/phase2-jwt-login
```

---

## コミットメッセージ規約 (和文)

```
<種別>: <概要>

# 種別例
feat   – 新機能
fix    – バグ修正
refactor – 内部構造変更
chore  – 環境・設定変更
docs   – ドキュメントのみ
```

> 例: `feat: JWT リフレッシュトークン発行ロジック追加`

---

## タスク粒度ガイドライン

- **1–2 時間でレビュー可能なサイズ** で区切る
- 複数ファイル変更は 300 行以内を目安
- デザイン・ロジック・テストを同時に変更しない (レビュア負荷軽減)

---

<!-- 編集禁止: メタ情報 -->
